[{"/Users/zhenbinwu/workspace/selectiontreerp/src/index.tsx":"1","/Users/zhenbinwu/workspace/selectiontreerp/src/App.tsx":"2","/Users/zhenbinwu/workspace/selectiontreerp/src/Code.tsx":"3","/Users/zhenbinwu/workspace/selectiontreerp/src/selectionTree.ts":"4","/Users/zhenbinwu/workspace/selectiontreerp/src/useSelection.ts":"5"},{"size":242,"mtime":1609224120840,"results":"6","hashOfConfig":"7"},{"size":187,"mtime":1609308770141,"results":"8","hashOfConfig":"7"},{"size":406,"mtime":1609308286625,"results":"9","hashOfConfig":"7"},{"size":2860,"mtime":1609314118199,"results":"10","hashOfConfig":"7"},{"size":1770,"mtime":1609307807408,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qb9vl8",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/zhenbinwu/workspace/selectiontreerp/src/index.tsx",[],"/Users/zhenbinwu/workspace/selectiontreerp/src/App.tsx",[],"/Users/zhenbinwu/workspace/selectiontreerp/src/Code.tsx",[],"/Users/zhenbinwu/workspace/selectiontreerp/src/selectionTree.ts",["23","24"],"enum SelectionType {\n  LEADING_NODE,\n  TAILING_NODE,\n  SAME_NODE,\n  ALL_SELECTED,\n}\n\nexport class SelectionTree {\n  // private root: Node;\n\n  // public init(root: Node) {\n  //   this.root = root;\n  // }\n\n  addSelection(selection: Selection) {\n    const {\n      anchorNode,\n      anchorOffset,\n      focusNode,\n      focusOffset\n    } = selection;\n    let current: Node | null = anchorNode;\n    while (current) {\n      let now = current;\n      console.log(now.nodeValue);\n      current = this.getNextLeafNode(current);\n      if (now === anchorNode && now === focusNode) {\n        this.addHighlight(now, selection, SelectionType.SAME_NODE);\n      } else if (now === focusNode) {\n        this.addHighlight(now, selection, SelectionType.TAILING_NODE);\n        break;\n      } else if (now === anchorNode){\n        this.addHighlight(now, selection, SelectionType.LEADING_NODE);\n      } else {\n        this.addHighlight(now, selection, SelectionType.ALL_SELECTED);\n      }\n    }\n  }\n\n  private createHighlightSpan(text: string) {\n    const span = document.createElement('span');\n    span.setAttribute('class', 'selected');\n    span.innerText = text;\n    return span;\n  }\n\n  private addHighlight(node: Node, selection: Selection, type?: SelectionType) {\n    if (node.nodeType !== 3) return; // 只对 TextNode 处理\n    const text = node.nodeValue || '';\n\n    if (text.length === 0) return;\n\n    if (type === SelectionType.ALL_SELECTED) {\n      node.nodeValue = '';\n      const span = this.createHighlightSpan(text);\n      node.parentNode?.insertBefore(span, node);\n    }\n    if (type === SelectionType.LEADING_NODE) {\n      const offset = selection.anchorOffset\n      node.nodeValue = text.substring(0, offset);\n      const span = this.createHighlightSpan(text.substring(offset));\n      node.parentNode?.appendChild(span);\n    }\n    if (type === SelectionType.TAILING_NODE) {\n      const offset = selection.focusOffset;\n      node.nodeValue = text.substring( offset);\n      const span = this.createHighlightSpan(text.substring(0, offset));\n      node.parentNode?.insertBefore(span, node);\n    }\n  }\n\n  public getNextLeafNode(node: Node) {\n    let current: Node | null = node;\n    while (current) {\n      if (current.childNodes.length === 0 && current !== node) {\n        return current;\n      }\n      current = this.nextElement(current);\n    }\n    return null;\n  }\n\n  public nextElement(node: Node) {\n    // 限定寻找范围\n    const within = document.getElementById('codeline');\n    if(node.childNodes.length) {\n        return node.childNodes[0];\n    }\n    if(node.nextSibling){\n        return node.nextSibling;\n    }\n    while(node.parentNode){\n      if (node.parentNode === within) {\n        break;\n      }\n      if(node.parentNode.nextSibling) {\n          return node.parentNode.nextSibling;\n      }\n      node = node.parentNode;\n    }\n    return null;\n  }\n}\n","/Users/zhenbinwu/workspace/selectiontreerp/src/useSelection.ts",["25","26","27"],{"ruleId":"28","severity":1,"message":"29","line":18,"column":7,"nodeType":"30","messageId":"31","endLine":18,"endColumn":19},{"ruleId":"28","severity":1,"message":"32","line":20,"column":7,"nodeType":"30","messageId":"31","endLine":20,"endColumn":18},{"ruleId":"28","severity":1,"message":"33","line":1,"column":10,"nodeType":"30","messageId":"31","endLine":1,"endColumn":18},{"ruleId":"28","severity":1,"message":"34","line":2,"column":20,"nodeType":"30","messageId":"31","endLine":2,"endColumn":28},{"ruleId":"35","severity":1,"message":"36","line":27,"column":6,"nodeType":"37","endLine":27,"endColumn":8,"suggestions":"38"},"@typescript-eslint/no-unused-vars","'anchorOffset' is assigned a value but never used.","Identifier","unusedVar","'focusOffset' is assigned a value but never used.","'useState' is defined but never used.","'endsWith' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 't'. Either include it or remove the dependency array.","ArrayExpression",["39"],{"desc":"40","fix":"41"},"Update the dependencies array to be: [t]",{"range":"42","text":"43"},[898,900],"[t]"]